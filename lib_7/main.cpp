#include "H.h"
//Исключения

//Шаблоны: 
	//		шаблоны функций,
	//		шаблоны классов,

//#include <stdexcept>

//Глобальные функции
ostream& operator<<(ostream& os, const MyString& s)
{
	//	os<<"contents:  "<<s.m_pStr;
	os << s.m_pStr;
	return os;
}

int _tmain(int argc, _TCHAR* argv[])
{
	setlocale(LC_ALL, "Russian");
		//Тема. Шаблоны функций.
		//Создайте шаблон функции перестановки местами двух
		//значений - Swap(). Проверьте работоспособность созданного
		//шаблона с помощью приведенного ниже фрагмента кода.
		//Подсказка 1: объявление шаблона корректнее поместить в .h-файл.

		int iX = 1, iY = -1;
		SWAP(iX, iY);
 		stop

		double dX = 0.5, dY = -5.5;
		SWAP(dX, dY);
		stop

		//Подсказка 2: подумайте, что нужно реализовать, для того,
		//			чтобы следующий вызов работал с объектами MyString
		//			не только корректно, но и эффективно
		MyString str1("One"), str2("Two");
		//SWAP(str1, str2);
		stop
			/////////////////////////////////////////////////////////////////////

				//Тема. Шаблоны классов.
				//Задание 1.
				//Создайте шаблон класса MyStack для хранения элементов любого типа T.
				//Подсказка: 1.элементы нужно где-то хранить - простым и удобным средством
				//			для хранения последовательно расположенных в памяти элементов
				//			является массив, 
				//			2.для задания максимального размера стека может быть использован
				//			параметр-константа шаблона
				//			3.обязательными операциями со стеком являются "push" и "pop". Для
				//			того, чтобы гарантировать корректное выполнение этих операций 
				//			хорошо было бы генерировать исключение в аварийной ситуации
				//			4. дополнительно реализуйте operator[] таким образом, чтобы пользователь
				//			мог читать/изменять значения только тех элементов, которые он формировал


				//С помощью шаблона MyStack создайте стек из 5 элементов int - iStack и
				//стек из 10 элементов MyString - strStack и поэкспериментируйте с функциями
				//push() и pop(), operator[]
		MyArray<int, 4> iStack;
		stop
			try
		{//Запись в стек
			for (int i = 0 ; i < 4 ; i++)
			{
				iStack.push(i);
			}
			stop
			for (int i = 0; i < 4 ; i++)
			{//Считывание из стека
				iStack.pop();
			}
			stop
		}
		catch(const char *error)
		{
			cout << error << endl;
		}
		stop
		//Проверяем индексирование
		int i = iStack[8];
		stop
		//Задание 2. Реализуйте шаблон стека - MyStack2 таким образом, чтобы 
		//для хранения элементов использовался ОДНОСВЯЗНЫЙ список.
		//Реализуйте возможность распечатать элементы стека в том порядке, в котором их заносил (push())
		//пользователь
		MyStack2_List<int>	q;
		stop
		for (int i = 0 ; i < 5 ; i++)
		{
			int w = i + 1;
			q.push(w);
		}
		stop
		for (int i = 0; i < 5; i++)
		{
		int u = q.pop();
		}
		stop



	return 0;
}